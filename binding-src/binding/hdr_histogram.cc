// 2020-04-23T14:14:53.899-07:00 binding hdr_histogram.c (GenerateDefinitions)
// Generated by inspiredware's Binding Toolkit â€” www.inspiredware.com

#include "hdr_histogram.h"
#include "napi-ingress.h"

extern "C" {
  void hdr_reset_internal_counters (struct hdr_histogram *);
  int hdr_init (long long, long long, int, struct hdr_histogram **);
  void hdr_close (struct hdr_histogram *);
  void hdr_reset (struct hdr_histogram *);
  unsigned long hdr_get_memory_size (struct hdr_histogram *);
  _Bool hdr_record_value (struct hdr_histogram *, long long);
  _Bool hdr_record_value_atomic (struct hdr_histogram *, long long);
  _Bool hdr_record_values (struct hdr_histogram *, long long, long long);
  _Bool hdr_record_values_atomic (struct hdr_histogram *, long long, long long);
  _Bool hdr_record_corrected_value (struct hdr_histogram *, long long, long long);
  _Bool hdr_record_corrected_value_atomic (struct hdr_histogram *, long long, long long);
  _Bool hdr_record_corrected_values (struct hdr_histogram *, long long, long long, long long);
  _Bool hdr_record_corrected_values_atomic (struct hdr_histogram *, long long, long long, long long);
  long long hdr_add (struct hdr_histogram *, const struct hdr_histogram *);
  long long hdr_max (const struct hdr_histogram *);
  long long hdr_min (const struct hdr_histogram *);
  long long hdr_value_at_percentile (const struct hdr_histogram *, double);
  double hdr_mean (const struct hdr_histogram *);
  double hdr_stddev (const struct hdr_histogram *);
  _Bool hdr_values_are_equivalent (const struct hdr_histogram *, long long, long long);
  long long hdr_lowest_equivalent_value (const struct hdr_histogram *, long long);
  long long hdr_count_at_value (const struct hdr_histogram *, long long);
  void hdr_iter_init (struct hdr_iter *, const struct hdr_histogram *);
  _Bool hdr_iter_next (struct hdr_iter *);
  void hdr_iter_percentile_init (struct hdr_iter *, const struct hdr_histogram *, int);
  void hdr_iter_recorded_init (struct hdr_iter *, const struct hdr_histogram *);
  void hdr_iter_linear_init (struct hdr_iter *, const struct hdr_histogram *, long long);
}
// pseudoClass HdrHistogram definition begin //

Value hdr_reset_internal_counters_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  hdr_reset_internal_counters (h);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_init_binding (const CallbackInfo& info) {
  Env env = info.Env();
  long long lowest_trackable_value = getNumber<long long> (info, 0);
  long long highest_trackable_value = getNumber<long long> (info, 1);
  int significant_figures = getNumber<int> (info, 2);
  struct hdr_histogram ** result;
  int retVal = hdr_init (lowest_trackable_value, highest_trackable_value, significant_figures, result);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_close_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  hdr_close (h);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_reset_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  hdr_reset (h);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_get_memory_size_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  unsigned long retVal = hdr_get_memory_size (h);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_record_value_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  _Bool retVal = hdr_record_value (h, value);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_value_atomic_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  _Bool retVal = hdr_record_value_atomic (h, value);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_values_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long count = getNumber<long long> (info, 2);
  _Bool retVal = hdr_record_values (h, value, count);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_values_atomic_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long count = getNumber<long long> (info, 2);
  _Bool retVal = hdr_record_values_atomic (h, value, count);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_corrected_value_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long expected_interval = getNumber<long long> (info, 2);
  _Bool retVal = hdr_record_corrected_value (h, value, expected_interval);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_corrected_value_atomic_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long expected_interval = getNumber<long long> (info, 2);
  _Bool retVal = hdr_record_corrected_value_atomic (h, value, expected_interval);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_corrected_values_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long count = getNumber<long long> (info, 2);
  long long expected_interval = getNumber<long long> (info, 3);
  _Bool retVal = hdr_record_corrected_values (h, value, count, expected_interval);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_record_corrected_values_atomic_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long count = getNumber<long long> (info, 2);
  long long expected_interval = getNumber<long long> (info, 3);
  _Bool retVal = hdr_record_corrected_values_atomic (h, value, count, expected_interval);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_add_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_histogram * h = 0;
  const struct hdr_histogram * from = 0;
  long long retVal = hdr_add (h, from);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_max_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  long long retVal = hdr_max (h);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_min_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  long long retVal = hdr_min (h);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_value_at_percentile_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  float percentile;
  long long retVal = hdr_value_at_percentile (h, percentile);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_mean_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  double retVal = hdr_mean (h);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_stddev_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  double retVal = hdr_stddev (h);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_values_are_equivalent_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  long long a = getNumber<long long> (info, 1);
  long long b = getNumber<long long> (info, 2);
  _Bool retVal = hdr_values_are_equivalent (h, a, b);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_lowest_equivalent_value_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long retVal = hdr_lowest_equivalent_value (h, value);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}

Value hdr_count_at_value_binding (const CallbackInfo& info) {
  Env env = info.Env();
  const struct hdr_histogram * h = 0;
  long long value = getNumber<long long> (info, 1);
  long long retVal = hdr_count_at_value (h, value);
  Value jsRetVal = Number::New(env, retVal);
  return jsRetVal;
}
// pseudoClass HdrHistogram definition end //
// pseudoClass HdrHistogramIterator definition begin //

Value hdr_iter_init_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_iter * iter = 0;
  const struct hdr_histogram * h = 0;
  hdr_iter_init (iter, h);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_iter_next_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_iter * iter = 0;
  _Bool retVal = hdr_iter_next (iter);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_iter_percentile_init_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_iter * iter = 0;
  const struct hdr_histogram * h = 0;
  int ticks_per_half_distance = getNumber<int> (info, 2);
  hdr_iter_percentile_init (iter, h, ticks_per_half_distance);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_iter_recorded_init_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_iter * iter = 0;
  const struct hdr_histogram * h = 0;
  hdr_iter_recorded_init (iter, h);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}

Value hdr_iter_linear_init_binding (const CallbackInfo& info) {
  Env env = info.Env();
  struct hdr_iter * iter = 0;
  const struct hdr_histogram * h = 0;
  long long value_units_per_bucket = getNumber<long long> (info, 2);
  hdr_iter_linear_init (iter, h, value_units_per_bucket);
  Value jsRetVal = env.Undefined();
  return jsRetVal;
}
// pseudoClass HdrHistogramIterator definition end //