// 2020-04-24T16:18:35.608-07:00 binding (GenerateBindingIndexes)
// Generated by inspiredware's Binding Toolkit â€” www.inspiredware.com

/* // temporary //
#include <napi.h>

#include "binding/hdr_histogram.h"

Napi::Object Init (Napi::Env env, Napi::Object exports) {
  exports["ResetInternalCounters"] = Napi::Function::New(env, HdrHistogram::ResetInternalCounters, std::string("ResetInternalCounters"));
  exports["Close"] = Napi::Function::New(env, HdrHistogram::Close, std::string("Close"));
  exports["Reset"] = Napi::Function::New(env, HdrHistogram::Reset, std::string("Reset"));
  exports["GetMemorySize"] = Napi::Function::New(env, HdrHistogram::GetMemorySize, std::string("GetMemorySize"));
  exports["RecordValue"] = Napi::Function::New(env, HdrHistogram::RecordValue, std::string("RecordValue"));
  exports["RecordValueAtomic"] = Napi::Function::New(env, HdrHistogram::RecordValueAtomic, std::string("RecordValueAtomic"));
  exports["RecordValues"] = Napi::Function::New(env, HdrHistogram::RecordValues, std::string("RecordValues"));
  exports["RecordValuesAtomic"] = Napi::Function::New(env, HdrHistogram::RecordValuesAtomic, std::string("RecordValuesAtomic"));
  exports["RecordCorrectedValue"] = Napi::Function::New(env, HdrHistogram::RecordCorrectedValue, std::string("RecordCorrectedValue"));
  exports["RecordCorrectedValueAtomic"] = Napi::Function::New(env, HdrHistogram::RecordCorrectedValueAtomic, std::string("RecordCorrectedValueAtomic"));
  exports["RecordCorrectedValues"] = Napi::Function::New(env, HdrHistogram::RecordCorrectedValues, std::string("RecordCorrectedValues"));
  exports["RecordCorrectedValuesAtomic"] = Napi::Function::New(env, HdrHistogram::RecordCorrectedValuesAtomic, std::string("RecordCorrectedValuesAtomic"));
  exports["Add"] = Napi::Function::New(env, HdrHistogram::Add, std::string("Add"));
  exports["Max"] = Napi::Function::New(env, HdrHistogram::Max, std::string("Max"));
  exports["Min"] = Napi::Function::New(env, HdrHistogram::Min, std::string("Min"));
  exports["ValueAtPercentile"] = Napi::Function::New(env, HdrHistogram::ValueAtPercentile, std::string("ValueAtPercentile"));
  exports["Mean"] = Napi::Function::New(env, HdrHistogram::Mean, std::string("Mean"));
  exports["StdDev"] = Napi::Function::New(env, HdrHistogram::StdDev, std::string("StdDev"));
  exports["ValuesAreEquivalent"] = Napi::Function::New(env, HdrHistogram::ValuesAreEquivalent, std::string("ValuesAreEquivalent"));
  exports["LowestEquivalentValue"] = Napi::Function::New(env, HdrHistogram::LowestEquivalentValue, std::string("LowestEquivalentValue"));
  exports["CountAtValue"] = Napi::Function::New(env, HdrHistogram::CountAtValue, std::string("CountAtValue"));
  exports["IterNext"] = Napi::Function::New(env, HdrHistogramIterator::IterNext, std::string("IterNext"));
  exports["PercentileInit"] = Napi::Function::New(env, HdrHistogramIterator::PercentileInit, std::string("PercentileInit"));
  exports["RecordedInit"] = Napi::Function::New(env, HdrHistogramIterator::RecordedInit, std::string("RecordedInit"));
  exports["LinearInit"] = Napi::Function::New(env, HdrHistogramIterator::LinearInit, std::string("LinearInit"));
  return exports;
}

NODE_API_MODULE(addon, Init)
// temporary // */